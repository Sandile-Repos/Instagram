type Like
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  postID: ID!
    @index(
      name: "byPost"
      queryField: "LikesForPostByUser"
      sortKeyFields: ["userID"]
    )

  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Comment
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  comment: String!
  createdAt: AWSDateTime!
  userID: ID! @index(name: "byUser")
  postID: ID!
    @index(
      name: "byPost"
      queryField: "commentsByPost"
      sortKeyFields: ["createdAt"]
    )
  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Post
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  createdAt: AWSDateTime!
  type: String!
    @index(
      name: "postsByDate"
      queryField: "postsByDate"
      sortKeyFields: "createdAt"
    )
  description: String
  video: String
  image: String
  images: [String!]
  noOfComments: Int!
  noOfLikes: Int!
  userID: ID! @index(name: "byUser")
  User: User @belongsTo(fields: ["userID"])
  Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  Likes: [Like] @hasMany(indexName: "byPost", fields: ["id"])
}

type User
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  name: String!
  email: String @auth(rules: [{allow: owner}])
  username: String @index(name: "userByUsername", queryField: "userByUsername")
  bio: String
  image: String
  website: AWSURL
  noOfPosts: Int!
  noOfFollowers: Int!
  noOfFollowing: Int!
  Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  Likes: [Like] @hasMany(indexName: "byUser", fields: ["id"])
}

type Subscription {
  onCreateCommentByPostId(postID: ID!): Comment
    @aws_subscribe(mutations: ["createComment"])
}
