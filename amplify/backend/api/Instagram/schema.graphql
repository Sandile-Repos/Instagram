type Like
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  postID: ID!
    @index(
      name: "byPost"
      queryField: "LikesForPostByUser" #likesForPostByUser
      sortKeyFields: ["userID"]
    )

  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Comment
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  comment: String!
  createdAt: AWSDateTime!
  userID: ID! @index(name: "byUser")
  postID: ID!
    @index(
      name: "byPost"
      queryField: "commentsByPost"
      sortKeyFields: ["createdAt"]
    )
  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Post
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  createdAt: AWSDateTime!
  type: String!
    @index(
      name: "postsByDate"
      queryField: "postsByDate"
      sortKeyFields: ["createdAt"]
    )
  description: String
  location: String
  video: String
  image: String
  images: [String!]
  noOfComments: Int!
  noOfLikes: Int!
  userID: ID! @index(name: "byUser")
  User: User @belongsTo(fields: ["userID"])
  Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  Likes: [Like] @hasMany(indexName: "byPost", fields: ["id"])
}

type User
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  name: String!
  email: String @auth(rules: [{allow: owner}])
  username: String @index(name: "userByUsername", queryField: "userByUsername")
  bio: String
  image: String
  website: AWSURL
  noOfPosts: Int!
  noOfFollowers: Int!
  noOfFollowing: Int!
  Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  Likes: [Like] @hasMany(indexName: "byUser", fields: ["id"])

  Followers: [UserFollow] @hasMany(indexName: "byFollowee", fields: ["id"])
  Followings: [UserFollow] @hasMany(indexName: "byFollower", fields: ["id"])

  fcmToken: String #not required to allow users who didn't give permission for notification
  Notifications: [Notification] @hasMany(indexName: "byUser", fields: ["id"])
}

type UserFollow
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!

  followerID: ID!
    @index(
      name: "byFollower"
      sortKeyFields: ["followeeID"]
      queryField: "userFollowings"
    )
  followeeID: ID!
    @index(
      name: "byFollowee"
      sortKeyFields: ["followerID"]
      queryField: "userFollowers"
    )

  Follower: User @belongsTo(fields: ["followerID"])
  Followee: User @belongsTo(fields: ["followeeID"])
}

type UserFeedPost @model @auth(rules: [{allow: owner}]) {
  id: ID!

  userID: ID!
    @index(
      name: "byUser"
      sortKeyFields: ["postCreatedAt"]
      queryField: "userFeed"
    )
  postID: ID! @index(name: "byPost")

  postCreatedAt: AWSDateTime!
  postOwnerID: ID! @index(name: "byPostOwner")

  Post: Post @hasOne(fields: ["postID"])
}

enum NotificationTypes {
  NEW_FOLLOWER
  NEW_LIKE
  NEW_COMMENT
}

type Notification
  @model
  @auth(rules: [{allow: private, operations: [read]}, {allow: owner}]) {
  id: ID!
  createdAt: AWSDateTime!
  readAt: AWSTimestamp!

  type: NotificationTypes!

  #The user we have to notify
  userID: ID!
    @index(
      name: "byUser"
      queryField: "userNotification"
      sortKeyFields: ["createdAt"]
    )
  User: User @belongsTo(fields: ["userID"])

  #The user who triggered the notification
  actorId: ID!
  Actor: User @belongsTo(fields: ["actorId"])

  #The post this notification refers to (optional connecting to another model, post in this case and
  # post does not have to know anything about Notification related to post. It one-direction)
  Post: Post @hasOne
  #Comment: Comment @hasOne     allows us to include the comment made inside the notification screen
}

type Subscription {
  onCreateCommentByPostId(postID: ID!): Comment
    @aws_subscribe(mutations: ["createComment"])
}
